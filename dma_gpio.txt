#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/io.h>
#include <linux/uaccess.h>
#include <linux/cdev.h>
#include <linux/device.h>
#include <linux/init.h>
#include <linux/delay.h>

#define DEVICE_NAME "dmagpio"
#define CLASS_NAME "dmaclass"

#define BCM2711_PERI_BASE       0xFE000000
#define GPIO_BASE               (BCM2711_PERI_BASE + 0x200000)

#define GPSET0                  0x1C
#define GPCLR0                  0x28

#define LED_GPIO                18

static void __iomem *gpio_base;
static int major_number;
static struct class* dmagpio_class = NULL;
static struct device* dmagpio_device = NULL;
static struct cdev dma_cdev;

static int dev_open(struct inode *inodep, struct file *filep) {
    pr_info("DMA GPIO device opened\n");
    return 0;
}

static int dev_release(struct inode *inodep, struct file *filep) {
    pr_info("DMA GPIO device closed\n");
    return 0;
}

static ssize_t dev_write(struct file *filep, const char __user *buffer, size_t len, loff_t *offset) {
    char cmd[16] = {0};

    if (copy_from_user(cmd, buffer, len > 15 ? 15 : len))
        return -EFAULT;

    // For now, just blink once on write
    iowrite32(1 << LED_GPIO, gpio_base + GPSET0);
    msleep(250);
    iowrite32(1 << LED_GPIO, gpio_base + GPCLR0);
    msleep(250);

    pr_info("DMA GPIO triggered from user space\n");

    return len;
}

static struct file_operations fops = {
    .open = dev_open,
    .write = dev_write,
    .release = dev_release,
};

static int __init dma_gpio_init(void) {
    gpio_base = ioremap(GPIO_BASE, 0x100);
    if (!gpio_base) {
        pr_err("Failed to map GPIO\n");
        return -ENOMEM;
    }

    // Set GPIO to output
    u32 val = ioread32(gpio_base + 0x08); // GPFSEL1
    val &= ~(7 << 24);
    val |= (1 << 24);
    iowrite32(val, gpio_base + 0x08);

    // Register char device
    major_number = register_chrdev(0, DEVICE_NAME, &fops);
    if (major_number < 0) {
        pr_err("Failed to register char device\n");
        return major_number;
    }

    dmagpio_class = class_create(THIS_MODULE, CLASS_NAME);
    if (IS_ERR(dmagpio_class)) {
        unregister_chrdev(major_number, DEVICE_NAME);
        return PTR_ERR(dmagpio_class);
    }

    dmagpio_device = device_create(dmagpio_class, NULL, MKDEV(major_number, 0), NULL, DEVICE_NAME);
    if (IS_ERR(dmagpio_device)) {
        class_destroy(dmagpio_class);
        unregister_chrdev(major_number, DEVICE_NAME);
        return PTR_ERR(dmagpio_device);
    }

    pr_info("DMA GPIO module loaded: /dev/%s created\n", DEVICE_NAME);
    return 0;
}

static void __exit dma_gpio_exit(void) {
    device_destroy(dmagpio_class, MKDEV(major_number, 0));
    class_unregister(dmagpio_class);
    class_destroy(dmagpio_class);
    unregister_chrdev(major_number, DEVICE_NAME);

    if (gpio_base)
        iounmap(gpio_base);

    pr_info("DMA GPIO module unloaded\n");
}

module_init(dma_gpio_init);
module_exit(dma_gpio_exit);

MODULE_LICENSE("GPL");
MODULE_AUTHOR("techdhaba");
MODULE_DESCRIPTION("DMA GPIO LED control with user-space interface");



#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd = open("/dev/dmagpio", O_WRONLY);
    if (fd < 0) {
        perror("Failed to open /dev/dmagpio");
        return 1;
    }

    const char *msg = "blink";
    write(fd, msg, 5); // trigger LED blink

    close(fd);
    return 0;
}

